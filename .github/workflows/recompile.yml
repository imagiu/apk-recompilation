name: Recompile APK

on:
  push:
    branches:
      - main

jobs:
  recompile:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Download Apktool
        run: |
          wget https://github.com/iBotPeaches/Apktool/releases/download/v2.9.3/apktool_2.9.3.jar -O apktool.jar
          echo -e '#!/bin/sh\njava -jar $(dirname "$0")/apktool.jar "$@"' > apktool
          chmod +x apktool
          sudo mv apktool apktool.jar /usr/local/bin/

      - name: Download Android SDK Build Tools (with apksigner + zipalign)
        run: |
          mkdir -p $HOME/android-sdk/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O sdk-tools.zip
          unzip sdk-tools.zip -d $HOME/android-sdk/cmdline-tools/tmp
          mv $HOME/android-sdk/cmdline-tools/tmp/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk "build-tools;34.0.0"
          echo "$HOME/android-sdk/build-tools/34.0.0" >> $GITHUB_PATH

      - name: Detect APK folder name
        id: detect
        run: |
          folder_name=$(find . -maxdepth 1 -type d ! -name '.' ! -name '.git' ! -name '.github' ! -path '*/\.*' | head -n1 | sed 's|./||')
          if [ -z "$folder_name" ]; then
            echo "No valid folder found for recompilation."
            exit 1
          fi
          echo "folder_name=$folder_name" >> $GITHUB_OUTPUT
          echo "output_apk=${folder_name}_recompiled.apk" >> $GITHUB_OUTPUT
          echo "aligned_apk=aligned-${folder_name}_recompiled.apk" >> $GITHUB_OUTPUT
          echo "signed_apk=signed-${folder_name}_recompiled.apk" >> $GITHUB_OUTPUT
          echo "idsig_file=signed-${folder_name}_recompiled.apk.idsig" >> $GITHUB_OUTPUT

      - name: Check for apktool.yml
        id: check_apktool
        run: |
          folder="${{ steps.detect.outputs.folder_name }}"
          if [ -f "$folder/apktool.yml" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug folder contents
        run: |
          folder="${{ steps.detect.outputs.folder_name }}"
          echo "Contents of $folder:"
          ls -al "$folder"

      - name: Recompile APK
        if: steps.check_apktool.outputs.exists == 'true'
        run: |
          mkdir -p output
          cd "${{ steps.detect.outputs.folder_name }}"
          apktool b . -o "../output/${{ steps.detect.outputs.output_apk }}"
          echo "APK recompiled successfully."

      - name: Align APK using zipalign
        if: steps.check_apktool.outputs.exists == 'true'
        run: |
          echo "Running zipalign..."
          zipalign -v -p 4 "output/${{ steps.detect.outputs.output_apk }}" "output/${{ steps.detect.outputs.aligned_apk }}"
          echo "APK aligned successfully."

      - name: Decode Keystore
        if: steps.check_apktool.outputs.exists == 'true'
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > athena-keystore.jks

      - name: Sign APK (v1–v4)
        if: steps.check_apktool.outputs.exists == 'true'
        run: |
          echo "Signing aligned APK with all signing versions..."
          apksigner sign \
            --ks athena-keystore.jks \
            --ks-key-alias ${{ secrets.KEY_ALIAS }} \
            --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
            --key-pass pass:${{ secrets.KEY_PASSWORD }} \
            --v1-signing-enabled true \
            --v2-signing-enabled true \
            --v3-signing-enabled true \
            --v4-signing-enabled true \
            --out "output/${{ steps.detect.outputs.signed_apk }}" \
            "output/${{ steps.detect.outputs.aligned_apk }}"
          echo "APK signing complete."

      - name: Push signed APK, idsig, and flag
        if: steps.check_apktool.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "ATHENA-Bot"
          git config user.email "athena@bot.com"
          git add output/${{ steps.detect.outputs.signed_apk }} \
                  output/${{ steps.detect.outputs.idsig_file }} \
                  recompile_done.flag || echo "Nothing to add"
          git commit -m "chore: signed recompiled APK (v1–v4) + idsig + flag" || echo "Nothing to commit"
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
          git push origin main

      - name: Create recompile_done.flag
        if: steps.check_apktool.outputs.exists == 'true'
        run: echo "done" > recompile_done.flag
